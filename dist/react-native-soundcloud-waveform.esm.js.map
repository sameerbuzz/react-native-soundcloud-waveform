{"version":3,"file":"react-native-soundcloud-waveform.esm.js","sources":["../src/utils/index.js","../src/components/Waveform.js","../src/index.js"],"sourcesContent":["/* eslint import/no-unresolved: [2, { ignore: ['react-native'] }] */\nimport { Dimensions } from 'react-native';\n\nfunction getColor(\n  bars,\n  bar,\n  percentPlayed,\n  percentPlayable,\n  inverse,\n  ACTIVE,\n  ACTIVE_INVERSE,\n  ACTIVE_PLAYABLE,\n  ACTIVE_PLAYABLE_INVERSE,\n  INACTIVE,\n  INACTIVE_INVERSE,\n) {\n  if (bar / bars.length < percentPlayed) {\n    return inverse ? ACTIVE_INVERSE : ACTIVE;\n  } if (bar / bars.length < percentPlayable) {\n    return inverse ? ACTIVE_PLAYABLE_INVERSE : ACTIVE_PLAYABLE;\n  }\n  return inverse ? INACTIVE_INVERSE : INACTIVE;\n}\n\nconst dimensionsWidth = Dimensions.get('window').width;\n\nexport { getColor, dimensionsWidth };\n","/* eslint import/no-unresolved: [2, { ignore: ['react', 'react-native'] }] */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, TouchableOpacity } from 'react-native';\n\nimport { scaleLinear } from 'd3-scale';\nimport { mean } from 'd3-array';\nimport _ from 'lodash';\n\nimport { getColor } from '../utils';\n\nfunction Waveform(\n  {\n    waveform,\n    height,\n    width,\n    setTime,\n    percentPlayed,\n    percentPlayable,\n    inverse,\n    active,\n    activeInverse,\n    activePlayable,\n    activePlayableInverse,\n    inactive,\n    inactiveInverse,\n  },\n) {\n  const scaleLinearHeight = scaleLinear().domain([0, waveform.height]).range([0, height]);\n  const chunks = _.chunk(waveform.samples, waveform.width / ((width - 60) / 3));\n  return (\n    <View style={[{\n      height,\n      width,\n      justifyContent: 'center',\n      flexDirection: 'row',\n    },\n    inverse && {\n      transform: [\n        { rotateX: '180deg' },\n        { rotateY: '0deg' },\n      ],\n    },\n    ]}\n    >\n      {chunks.map((chunk, i) => (\n        <TouchableOpacity\n          key={i}\n          onPress={() => {\n            setTime(i);\n          }}\n        >\n          <View style={{\n            backgroundColor: getColor(\n              chunks,\n              i,\n              percentPlayed,\n              percentPlayable,\n              inverse,\n              active,\n              activeInverse,\n              activePlayable,\n              activePlayableInverse,\n              inactive,\n              inactiveInverse,\n            ),\n            width: 2,\n            marginRight: 1,\n            height: scaleLinearHeight(mean(chunk)),\n          }}\n          />\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n}\n\nWaveform.propTypes = {\n  waveform: PropTypes.object.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  setTime: PropTypes.func.isRequired,\n  percentPlayed: PropTypes.number.isRequired,\n  percentPlayable: PropTypes.number.isRequired,\n  inverse: PropTypes.bool.isRequired,\n  active: PropTypes.string.isRequired,\n  activeInverse: PropTypes.string.isRequired,\n  activePlayable: PropTypes.string.isRequired,\n  activePlayableInverse: PropTypes.string.isRequired,\n  inactive: PropTypes.string.isRequired,\n  inactiveInverse: PropTypes.string.isRequired,\n};\n\nexport default Waveform;\n","/* eslint import/no-unresolved: [2, { ignore: ['react', 'react-native'] }] */\n/* eslint-disable no-undef */\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport Waveform from './components/Waveform';\n\nimport { dimensionsWidth } from './utils';\n\nclass SoundCloudWave extends Component {\n  state = {\n    waveform: null,\n  }\n\n  componentDidMount() {\n    const { waveformUrl } = this.props;\n    fetch(waveformUrl.replace('png', 'json'))\n      .then(res => res.json())\n      .then((json) => {\n        this.setState({\n          waveform: json,\n        });\n      });\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      percentPlayed,\n      percentPlayable,\n      setTime,\n      active,\n      activeInverse,\n      activePlayable,\n      activePlayableInverse,\n      inactive,\n      inactiveInverse,\n    } = this.props;\n    const { waveform } = this.state;\n    if (!waveform) return null;\n    return (\n      <View style={{ flex: 1, justifyContent: 'center' }}>\n        <Waveform\n          waveform={waveform}\n          height={height}\n          width={width}\n          setTime={setTime}\n          percentPlayed={percentPlayed}\n          percentPlayable={percentPlayable}\n          active={active}\n          activeInverse={activeInverse}\n          activePlayable={activePlayable}\n          activePlayableInverse={activePlayableInverse}\n          inactive={inactive}\n          inactiveInverse={inactiveInverse}\n          inverse\n        />\n        <Waveform\n          waveform={waveform}\n          height={height}\n          width={width}\n          setTime={setTime}\n          percentPlayed={percentPlayed}\n          percentPlayable={percentPlayable}\n          active={active}\n          activeInverse={activeInverse}\n          activePlayable={activePlayable}\n          activePlayableInverse={activePlayableInverse}\n          inactive={inactive}\n          inactiveInverse={inactiveInverse}\n          inverse={false}\n        />\n      </View>\n    );\n  }\n}\n\nSoundCloudWave.defaultProps = {\n  percentPlayable: 0,\n  height: 50,\n  width: dimensionsWidth,\n  active: '#FF1844',\n  activeInverse: '#4F1224',\n  activePlayable: '#1b1b26',\n  activePlayableInverse: '#131116',\n  inactive: '#424056',\n  inactiveInverse: '#1C1A27',\n};\n\nSoundCloudWave.propTypes = {\n  waveformUrl: PropTypes.string.isRequired,\n  setTime: PropTypes.func.isRequired,\n  percentPlayed: PropTypes.number.isRequired,\n  percentPlayable: PropTypes.number,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  active: PropTypes.string,\n  activeInverse: PropTypes.string,\n  activePlayable: PropTypes.string,\n  activePlayableInverse: PropTypes.string,\n  inactive: PropTypes.string,\n  inactiveInverse: PropTypes.string,\n};\n\nexport default SoundCloudWave;\n"],"names":["getColor","bars","bar","percentPlayed","percentPlayable","inverse","ACTIVE","ACTIVE_INVERSE","ACTIVE_PLAYABLE","ACTIVE_PLAYABLE_INVERSE","INACTIVE","INACTIVE_INVERSE","length","dimensionsWidth","Dimensions","get","width","Waveform","waveform","height","setTime","active","activeInverse","activePlayable","activePlayableInverse","inactive","inactiveInverse","scaleLinearHeight","scaleLinear","domain","range","chunks","_","chunk","samples","justifyContent","flexDirection","transform","rotateX","rotateY","map","i","backgroundColor","marginRight","mean","propTypes","PropTypes","object","isRequired","number","func","bool","string","SoundCloudWave","componentDidMount","waveformUrl","props","fetch","replace","then","res","json","setState","render","state","flex","Component","defaultProps"],"mappings":"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"}