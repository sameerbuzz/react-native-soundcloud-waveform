{"version":3,"file":"react-native-soundcloud-waveform.min.js","sources":["../src/utils/index.js","../src/components/Waveform.js","../src/index.js"],"sourcesContent":["/* eslint import/no-unresolved: [2, { ignore: ['react-native'] }] */\nimport { Dimensions } from 'react-native';\n\nfunction getColor(\n  bars,\n  bar,\n  percentPlayed,\n  percentPlayable,\n  inverse,\n  ACTIVE,\n  ACTIVE_INVERSE,\n  ACTIVE_PLAYABLE,\n  ACTIVE_PLAYABLE_INVERSE,\n  INACTIVE,\n  INACTIVE_INVERSE,\n) {\n  if (bar / bars.length < percentPlayed) {\n    return inverse ? ACTIVE_INVERSE : ACTIVE;\n  } if (bar / bars.length < percentPlayable) {\n    return inverse ? ACTIVE_PLAYABLE_INVERSE : ACTIVE_PLAYABLE;\n  }\n  return inverse ? INACTIVE_INVERSE : INACTIVE;\n}\n\nconst dimensionsWidth = Dimensions.get('window').width;\n\nexport { getColor, dimensionsWidth };\n","/* eslint import/no-unresolved: [2, { ignore: ['react', 'react-native'] }] */\n/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { View, TouchableOpacity } from 'react-native';\n\nimport { scaleLinear } from 'd3-scale';\nimport { mean } from 'd3-array';\nimport _ from 'lodash';\n\nimport { getColor } from '../utils';\n\nfunction Waveform(\n  {\n    waveform,\n    height,\n    width,\n    setTime,\n    percentPlayed,\n    percentPlayable,\n    inverse,\n    active,\n    activeInverse,\n    activePlayable,\n    activePlayableInverse,\n    inactive,\n    inactiveInverse,\n  },\n) {\n  const scaleLinearHeight = scaleLinear().domain([0, waveform.height]).range([0, height]);\n  const chunks = _.chunk(waveform.samples, waveform.width / ((width - 60) / 3));\n  return (\n    <View style={[{\n      height,\n      width,\n      justifyContent: 'center',\n      flexDirection: 'row',\n    },\n    inverse && {\n      transform: [\n        { rotateX: '180deg' },\n        { rotateY: '0deg' },\n      ],\n    },\n    ]}\n    >\n      {chunks.map((chunk, i) => (\n        <TouchableOpacity\n          key={i}\n          onPress={() => {\n            setTime(i);\n          }}\n        >\n          <View style={{\n            backgroundColor: getColor(\n              chunks,\n              i,\n              percentPlayed,\n              percentPlayable,\n              inverse,\n              active,\n              activeInverse,\n              activePlayable,\n              activePlayableInverse,\n              inactive,\n              inactiveInverse,\n            ),\n            width: 2,\n            marginRight: 1,\n            height: scaleLinearHeight(mean(chunk)),\n          }}\n          />\n        </TouchableOpacity>\n      ))}\n    </View>\n  );\n}\n\nWaveform.propTypes = {\n  waveform: PropTypes.object.isRequired,\n  height: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  setTime: PropTypes.func.isRequired,\n  percentPlayed: PropTypes.number.isRequired,\n  percentPlayable: PropTypes.number.isRequired,\n  inverse: PropTypes.bool.isRequired,\n  active: PropTypes.string.isRequired,\n  activeInverse: PropTypes.string.isRequired,\n  activePlayable: PropTypes.string.isRequired,\n  activePlayableInverse: PropTypes.string.isRequired,\n  inactive: PropTypes.string.isRequired,\n  inactiveInverse: PropTypes.string.isRequired,\n};\n\nexport default Waveform;\n","/* eslint import/no-unresolved: [2, { ignore: ['react', 'react-native'] }] */\n/* eslint-disable no-undef */\nimport React, { Component } from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport Waveform from './components/Waveform';\n\nimport { dimensionsWidth } from './utils';\n\nclass SoundCloudWave extends Component {\n  state = {\n    waveform: null,\n  }\n\n  componentDidMount() {\n    const { waveformUrl } = this.props;\n    fetch(waveformUrl.replace('png', 'json'))\n      .then(res => res.json())\n      .then((json) => {\n        this.setState({\n          waveform: json,\n        });\n      });\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      percentPlayed,\n      percentPlayable,\n      setTime,\n      active,\n      activeInverse,\n      activePlayable,\n      activePlayableInverse,\n      inactive,\n      inactiveInverse,\n    } = this.props;\n    const { waveform } = this.state;\n    if (!waveform) return null;\n    return (\n      <View style={{ flex: 1, justifyContent: 'center' }}>\n        <Waveform\n          waveform={waveform}\n          height={height}\n          width={width}\n          setTime={setTime}\n          percentPlayed={percentPlayed}\n          percentPlayable={percentPlayable}\n          active={active}\n          activeInverse={activeInverse}\n          activePlayable={activePlayable}\n          activePlayableInverse={activePlayableInverse}\n          inactive={inactive}\n          inactiveInverse={inactiveInverse}\n          inverse\n        />\n        <Waveform\n          waveform={waveform}\n          height={height}\n          width={width}\n          setTime={setTime}\n          percentPlayed={percentPlayed}\n          percentPlayable={percentPlayable}\n          active={active}\n          activeInverse={activeInverse}\n          activePlayable={activePlayable}\n          activePlayableInverse={activePlayableInverse}\n          inactive={inactive}\n          inactiveInverse={inactiveInverse}\n          inverse={false}\n        />\n      </View>\n    );\n  }\n}\n\nSoundCloudWave.defaultProps = {\n  percentPlayable: 0,\n  height: 50,\n  width: dimensionsWidth,\n  active: '#FF1844',\n  activeInverse: '#4F1224',\n  activePlayable: '#1b1b26',\n  activePlayableInverse: '#131116',\n  inactive: '#424056',\n  inactiveInverse: '#1C1A27',\n};\n\nSoundCloudWave.propTypes = {\n  waveformUrl: PropTypes.string.isRequired,\n  setTime: PropTypes.func.isRequired,\n  percentPlayed: PropTypes.number.isRequired,\n  percentPlayable: PropTypes.number,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  active: PropTypes.string,\n  activeInverse: PropTypes.string,\n  activePlayable: PropTypes.string,\n  activePlayableInverse: PropTypes.string,\n  inactive: PropTypes.string,\n  inactiveInverse: PropTypes.string,\n};\n\nexport default SoundCloudWave;\n"],"names":["getColor","bars","bar","percentPlayed","percentPlayable","inverse","ACTIVE","ACTIVE_INVERSE","ACTIVE_PLAYABLE","ACTIVE_PLAYABLE_INVERSE","INACTIVE","INACTIVE_INVERSE","length","dimensionsWidth","Dimensions","get","width","Waveform","waveform","height","setTime","active","activeInverse","activePlayable","activePlayableInverse","inactive","inactiveInverse","scaleLinearHeight","scaleLinear","domain","range","chunks","_","chunk","samples","React","View","style","justifyContent","flexDirection","transform","rotateX","rotateY","map","i","TouchableOpacity","key","onPress","backgroundColor","marginRight","mean","propTypes","PropTypes","object","isRequired","number","func","bool","string","SoundCloudWave","componentDidMount","waveformUrl","this","props","fetch","replace","then","res","json","_this2","setState","render","state","flex","Component","defaultProps"],"mappings":"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"}